$date
	Thu Nov 11 13:07:13 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module testbench $end
$var reg 1 ! clock $end
$var reg 1 " reset $end
$var integer 32 # i [31:0] $end
$var integer 32 $ j [31:0] $end
$var integer 32 % k [31:0] $end
$scope module mm $end
$var wire 1 ! clock $end
$var wire 1 " reset $end
$var wire 72 & thread_outputs [71:0] $end
$var wire 1 ' k_done $end
$var reg 3 ( k_signal [2:0] $end
$scope begin genblk1[0] $end
$scope begin genblk2[0] $end
$scope module cal $end
$var wire 8 ) A [7:0] $end
$var wire 8 * B [7:0] $end
$var wire 1 ! clock $end
$var wire 1 " reset $end
$var reg 8 + res [7:0] $end
$upscope $end
$upscope $end
$scope begin genblk2[1] $end
$scope module cal $end
$var wire 8 , A [7:0] $end
$var wire 8 - B [7:0] $end
$var wire 1 ! clock $end
$var wire 1 " reset $end
$var reg 8 . res [7:0] $end
$upscope $end
$upscope $end
$scope begin genblk2[2] $end
$scope module cal $end
$var wire 8 / A [7:0] $end
$var wire 8 0 B [7:0] $end
$var wire 1 ! clock $end
$var wire 1 " reset $end
$var reg 8 1 res [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$scope begin genblk2[0] $end
$scope module cal $end
$var wire 8 2 A [7:0] $end
$var wire 8 3 B [7:0] $end
$var wire 1 ! clock $end
$var wire 1 " reset $end
$var reg 8 4 res [7:0] $end
$upscope $end
$upscope $end
$scope begin genblk2[1] $end
$scope module cal $end
$var wire 8 5 A [7:0] $end
$var wire 8 6 B [7:0] $end
$var wire 1 ! clock $end
$var wire 1 " reset $end
$var reg 8 7 res [7:0] $end
$upscope $end
$upscope $end
$scope begin genblk2[2] $end
$scope module cal $end
$var wire 8 8 A [7:0] $end
$var wire 8 9 B [7:0] $end
$var wire 1 ! clock $end
$var wire 1 " reset $end
$var reg 8 : res [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope begin genblk2[0] $end
$scope module cal $end
$var wire 8 ; A [7:0] $end
$var wire 8 < B [7:0] $end
$var wire 1 ! clock $end
$var wire 1 " reset $end
$var reg 8 = res [7:0] $end
$upscope $end
$upscope $end
$scope begin genblk2[1] $end
$scope module cal $end
$var wire 8 > A [7:0] $end
$var wire 8 ? B [7:0] $end
$var wire 1 ! clock $end
$var wire 1 " reset $end
$var reg 8 @ res [7:0] $end
$upscope $end
$upscope $end
$scope begin genblk2[2] $end
$scope module cal $end
$var wire 8 A A [7:0] $end
$var wire 8 B B [7:0] $end
$var wire 1 ! clock $end
$var wire 1 " reset $end
$var reg 8 C res [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
x'
bx &
b11 %
b11 $
b11 #
1"
0!
$end
#5
1!
#10
b0 C
b0 @
b0 =
b0 :
b0 7
b0 4
b0 1
b0 .
b0 &
b0 +
0'
b11 )
b11 *
b11 ,
b100 -
b11 /
b101 0
b100 2
b11 3
b100 5
b100 6
b100 8
b101 9
b101 ;
b11 <
b101 >
b100 ?
b101 A
b101 B
b1 (
b100 #
0!
0"
#15
b11 )
b11 *
b11 ,
b100 -
b11 /
b101 0
b100 2
b11 3
b100 5
b100 6
b100 8
b101 9
b101 ;
b11 <
b101 >
b100 ?
b101 A
b101 B
b1 (
1!
#20
b101 #
0!
1"
#25
1'
b100 )
b100 *
b100 ,
b101 -
b100 /
b110 0
b101 2
b100 3
b101 5
b101 6
b101 8
b110 9
b110 ;
b100 <
b110 >
b101 ?
b110 A
b110 B
b10 (
b11001 C
b10100 @
b1111 =
b10100 :
b10000 7
b1100 4
b1111 1
b1100 .
b110010001010000001111000101000001000000001100000011110000110000001001 &
b1001 +
1!
#30
b110 #
0!
#35
b11001 +
b100000 .
b100111 1
b100000 4
b101001 7
b110010 :
b100111 =
b110010 @
b1111010011001000100111001100100010100100100000001001110010000000011001 &
b111101 C
0'
b10 )
b10 *
b10 ,
b11 -
b10 /
b100 0
b11 2
b10 3
b11 5
b11 6
b11 8
b100 9
b100 ;
b10 <
b100 >
b11 ?
b100 A
b100 B
b0 (
1!
